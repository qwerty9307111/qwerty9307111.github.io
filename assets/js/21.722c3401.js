(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{255:function(a,t,s){"use strict";s.r(t);var r=s(2),e=Object(r.a)({},function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"javascript-设计模式核⼼原理与应⽤实践笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#javascript-设计模式核⼼原理与应⽤实践笔记","aria-hidden":"true"}},[a._v("#")]),a._v(" JavaScript 设计模式核⼼原理与应⽤实践笔记")]),a._v(" "),s("blockquote",[s("p",[a._v("很多人缺乏的并不是这种高瞻远瞩的激情，而是“不变能力”中最基本的那一点——用健壮的代码去解决具体的问题的能力")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#%E8%AF%BE%E7%A8%8B%E5%A4%A7%E7%BA%B2"}},[a._v("课程大纲")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99"}},[a._v("设计原则")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#solid-%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99"}},[a._v("SOLID 设计原则")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3%E2%80%94%E2%80%94%E5%B0%81%E8%A3%85%E5%8F%98%E5%8C%96"}},[a._v("设计模式的核心思想——封装变化")])]),a._v(" "),s("li",[s("a",{attrs:{href:"#_23-%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F"}},[a._v("23 钟设计模式")])])])]),a._v(" "),s("li",[s("a",{attrs:{href:"#%E6%9E%84%E9%80%A0%E5%99%A8%E6%A8%A1%E5%BC%8F"}},[a._v("构造器模式")])])]),a._v(" "),s("h2",{attrs:{id:"课程大纲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课程大纲","aria-hidden":"true"}},[a._v("#")]),a._v(" 课程大纲")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/designPatterns.jpg",alt:"designPatterns"}})]),a._v(" "),s("h2",{attrs:{id:"设计原则a"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计原则a","aria-hidden":"true"}},[a._v("#")]),a._v(" 设计原则a")]),a._v(" "),s("h3",{attrs:{id:"solid-设计原则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#solid-设计原则","aria-hidden":"true"}},[a._v("#")]),a._v(" SOLID 设计原则")]),a._v(" "),s("blockquote",[s("p",[a._v('"SOLID" 是由罗伯特·C·马丁在 21 世纪早期引入的记忆术首字母缩略字，指代了面向对象编程和面向对象设计的五个基本原则。')])]),a._v(" "),s("p",[a._v("设计原则是设计模式的指导理论，它可以帮助我们规避不良的软件设计。SOLID 指代的五个基本原则分别是：")]),a._v(" "),s("ul",[s("li",[a._v("单一功能原则（Single Responsibility Principle）")]),a._v(" "),s("li",[a._v("开放封闭原则（Opened Closed Principle）")]),a._v(" "),s("li",[a._v("里式替换原则（Liskov Substitution Principle）")]),a._v(" "),s("li",[a._v("接口隔离原则（Interface Segregation Principle）")]),a._v(" "),s("li",[a._v("依赖反转原则（Dependency Inversion Principle）")])]),a._v(" "),s("h3",{attrs:{id:"设计模式的核心思想——封装变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的核心思想——封装变化","aria-hidden":"true"}},[a._v("#")]),a._v(" 设计模式的核心思想——封装变化")]),a._v(" "),s("p",[a._v("实际开发中，不发生变化的代码可以说是不存在的。我们能做的只有将这个变化造成的影响"),s("strong",[a._v("最小化 —— 将变与不变分离，确保变化的部分灵活、不变的部分稳定")])]),a._v(" "),s("p",[a._v("这个过程，就叫“封装变化”；这样的代码，就是我们所谓的“健壮”的代码，它可以经得起变化的考验。而设计模式出现的意义，就是帮我们写出这样的代码。")]),a._v(" "),s("h3",{attrs:{id:"_23-种设计模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-种设计模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 23 种设计模式")]),a._v(" "),s("p",[a._v("二十年前，四位程序员前辈（Erich Gamma, Richard Helm, Ralph Johnson & John Vlissides）通过编写《设计模式：可复用面向对象软件的基础》这本书，阐述了设计模式领域的开创性成果。在这本书中，将23种设计模式按照“创建型”、“行为型”和“结构型”进行划分：")]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/types.png",alt:"types"}})]),a._v(" "),s("p",[a._v("前面我们说过，设计模式的核心思想，就是“封装变化”。确实如此，无论是创建型、结构型还是行为型，这些具体的设计模式都是在用自己的方式去封装不同类型的变化 —— 创建型模式封装了创建对象过程中的变化，比如工厂模式，它做的事情就是将创建对象的过程抽离；结构型模式封装的是对象之间组合方式的变化，目的在于灵活地表达对象间的配合与依赖关系；而行为型模式则将是对象千变万化的行为进行抽离，确保我们能够更安全、更方便地对行为进行更改。")]),a._v(" "),s("h2",{attrs:{id:"构造器模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造器模式","aria-hidden":"true"}},[a._v("#")]),a._v(" 构造器模式")]),a._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("User")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("constructor")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" carrer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" name\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("age "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" age\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("carrer "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" carrer\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])])])},[],!1,null,null,null);t.default=e.exports}}]);